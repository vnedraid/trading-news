using Temporalio.Client;
using listener.Workflows;

namespace listener;

public class Worker : BackgroundService
{
    private readonly ILogger<Worker> _logger;
    private readonly ITemporalClient _temporalClient;

    public Worker(ILogger<Worker> logger, ITemporalClient temporalClient)
    {
        _logger = logger;
        _temporalClient = temporalClient;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        const string workflowId = "news-feed-workflow";
        WorkflowHandle<NewsListenerWorkflow>? workflowHandle = null;
        
        try
        {
            _logger.LogInformation("üöÄ –ó–∞–ø—É—Å–∫ News Listener Workflow...");
            
            try
            {
                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π workflow
                workflowHandle = await _temporalClient.StartWorkflowAsync(
                    (NewsListenerWorkflow wf) => wf.RunAsync(),
                    new WorkflowOptions
                    {
                        Id = workflowId,
                        TaskQueue = "news-feed-task-queue"
                    });
                
                _logger.LogInformation("‚úÖ –ù–æ–≤—ã–π workflow –∑–∞–ø—É—â–µ–Ω —Å ID: {WorkflowId}", workflowHandle.Id);
            }
            catch (Temporalio.Exceptions.WorkflowAlreadyStartedException)
            {
                // –ï—Å–ª–∏ workflow —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                _logger.LogInformation("üîÑ Workflow —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...");
                workflowHandle = _temporalClient.GetWorkflowHandle<NewsListenerWorkflow>(workflowId);
                
                try
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ workflow
                    var description = await workflowHandle.DescribeAsync();
                    
                    if (description.Status == Temporalio.Api.Enums.V1.WorkflowExecutionStatus.Canceled ||
                        description.Status == Temporalio.Api.Enums.V1.WorkflowExecutionStatus.Terminated ||
                        description.Status == Temporalio.Api.Enums.V1.WorkflowExecutionStatus.Failed ||
                        description.Status == Temporalio.Api.Enums.V1.WorkflowExecutionStatus.Completed)
                    {
                        _logger.LogInformation("üîÑ –°—Ç–∞—Ä—ã–π workflow –∑–∞–≤–µ—Ä—à–µ–Ω ({Status}), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...", description.Status);
                        
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workflow —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
                        var newWorkflowId = $"{workflowId}-{DateTime.UtcNow:yyyyMMdd-HHmmss}";
                        workflowHandle = await _temporalClient.StartWorkflowAsync(
                            (NewsListenerWorkflow wf) => wf.RunAsync(),
                            new WorkflowOptions
                            {
                                Id = newWorkflowId,
                                TaskQueue = "news-feed-task-queue"
                            });
                        
                        _logger.LogInformation("‚úÖ –ù–æ–≤—ã–π workflow –∑–∞–ø—É—â–µ–Ω —Å ID: {WorkflowId}", workflowHandle.Id);
                    }
                    else
                    {
                        _logger.LogInformation("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É workflow —Å ID: {WorkflowId}", workflowHandle.Id);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å workflow, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...");
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workflow —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
                    var newWorkflowId = $"{workflowId}-{DateTime.UtcNow:yyyyMMdd-HHmmss}";
                    workflowHandle = await _temporalClient.StartWorkflowAsync(
                        (NewsListenerWorkflow wf) => wf.RunAsync(),
                        new WorkflowOptions
                        {
                            Id = newWorkflowId,
                            TaskQueue = "news-feed-task-queue"
                        });
                    
                    _logger.LogInformation("‚úÖ –ù–æ–≤—ã–π workflow –∑–∞–ø—É—â–µ–Ω —Å ID: {WorkflowId}", workflowHandle.Id);
                }
            }

            _logger.LogInformation("üéß –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç Signal Sender...");
            _logger.LogInformation("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏ workflow");
            
            // –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è workflow, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            var workflowTask = workflowHandle.GetResultAsync();
            var cancellationTask = Task.Delay(Timeout.Infinite, stoppingToken);
            
            await Task.WhenAny(workflowTask, cancellationTask);
            
            if (stoppingToken.IsCancellationRequested)
            {
                _logger.LogInformation("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
                await StopWorkflowAsync(workflowHandle);
                return;
            }
            
            // –ï—Å–ª–∏ workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º –ø–æ —Å–µ–±–µ
            await workflowTask;
        }
        catch (OperationCanceledException) when (stoppingToken.IsCancellationRequested)
        {
            _logger.LogInformation("üõë –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            if (workflowHandle != null)
            {
                await StopWorkflowAsync(workflowHandle);
            }
        }
        catch (Temporalio.Exceptions.WorkflowFailedException ex) when (ex.InnerException is Temporalio.Exceptions.CanceledFailureException)
        {
            _logger.LogInformation("üîÑ Workflow –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ workflow");
            throw;
        }
    }

    private async Task StopWorkflowAsync(WorkflowHandle<NewsListenerWorkflow> workflowHandle)
    {
        try
        {
            _logger.LogInformation("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º workflow {WorkflowId}...", workflowHandle.Id);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            var signalsCount = await workflowHandle.QueryAsync(wf => wf.GetSignalsCount());
            _logger.LogInformation("üìä Workflow –æ–±—Ä–∞–±–æ—Ç–∞–ª {Count} —Å–∏–≥–Ω–∞–ª–æ–≤", signalsCount);
            
            // –û—Ç–º–µ–Ω—è–µ–º workflow
            await workflowHandle.CancelAsync();
            _logger.LogInformation("‚úÖ Workflow —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        catch (Exception ex)
        {
            _logger.LogWarning(ex, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å workflow, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω");
        }
    }
}
