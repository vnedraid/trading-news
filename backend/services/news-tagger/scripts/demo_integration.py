#!/usr/bin/env python3
"""
Demo script to show news-feeder ‚Üí news-tagger integration.
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timezone

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

# Import from news-tagger
from models.news_item import NewsItem
from models.tagger_config import LLMConfig, TaggerConfig
from services.llm_service import LLMService


def setup_logging():
    """Configure logging for the demo."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # Set specific loggers to INFO for cleaner output
    logging.getLogger('workers.base_worker').setLevel(logging.INFO)
    logging.getLogger('services.llm_service').setLevel(logging.INFO)


def create_sample_news_from_feeder():
    """Simulate news items that would come from news-feeder service."""
    return [
        NewsItem(
            title="–ú–æ—Å–±–∏—Ä–∂–∞ —Å 10 –∏—é–Ω—è –∑–∞–ø—É—Å—Ç–∏—Ç —Ç–æ—Ä–≥–∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ –Ω–∞ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫",
            url="https://www.kommersant.ru/doc/7777077",
            source="news_feeder_rss",
            content="–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞ –æ–±—ä—è–≤–∏–ª–∞ –æ –∑–∞–ø—É—Å–∫–µ —Ç–æ—Ä–≥–æ–≤ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –Ω–∞ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫ —Å 10 –∏—é–Ω—è. –ù–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä—ã–Ω–∫–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é —Ü–µ–Ω –Ω–∞ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é. –¢–æ—Ä–≥–∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö —Ç–æ–≤–∞—Ä–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –±–∏—Ä–∂–∏.",
            published_at=datetime(2025, 6, 7, 16, 43, 29, tzinfo=timezone.utc)
        ),
        NewsItem(
            title="Boeing –¥–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è —Å –≤–ª–∞—Å—Ç—è–º–∏ –°–®–ê –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –∫—Ä—É—à–µ–Ω–∏—è 737 Max",
            url="https://www.kommersant.ru/doc/7776979",
            source="news_feeder_rss",
            content="–ö–æ–º–ø–∞–Ω–∏—è Boeing –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è —Å –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º —é—Å—Ç–∏—Ü–∏–∏ –°–®–ê –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Å–≤—è–∑–∏ —Å –¥–≤—É–º—è –∞–≤–∏–∞–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞–º–∏ —Å–∞–º–æ–ª–µ—Ç–æ–≤ 737 Max. –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É —à—Ç—Ä–∞—Ñ–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ $243 –º–ª–Ω –∏ —É—Å–∏–ª–µ–Ω–∏–µ –º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ö–æ–º–ø–∞–Ω–∏—è —Ç–∞–∫–∂–µ –æ–±—è–∑—É–µ—Ç—Å—è –≤–Ω–µ–¥—Ä–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.",
            published_at=datetime(2025, 6, 7, 15, 34, 21, tzinfo=timezone.utc)
        ),
        NewsItem(
            title="–≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—à–µ–Ω–∏—Ü—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ 20% –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ",
            url="https://www.kommersant.ru/doc/7776695",
            source="news_feeder_rss",
            content="–ü–æ –¥–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤, —ç–∫—Å–ø–æ—Ä—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ø—à–µ–Ω–∏—Ü—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–µ–∑–æ–Ω–µ –º–æ–∂–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ 20% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º –∏–∑-–∑–∞ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ —Å–Ω–∏–∂–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –º–∏—Ä–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏.",
            published_at=datetime(2025, 6, 7, 14, 50, 18, tzinfo=timezone.utc)
        ),
        NewsItem(
            title="Fix Price –æ–±–º–µ–Ω—è–µ—Ç –ì–î–† –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ö–æ–ª–¥–∏–Ω–≥–∞ –Ω–∞ –∞–∫—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∞–∫—Ç–∏–≤–∞",
            url="https://www.kommersant.ru/doc/7776920",
            source="news_feeder_rss",
            content="–ö–æ–º–ø–∞–Ω–∏—è Fix Price –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç–∞—Ä–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∫–∏ (–ì–î–†) –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ö–æ–ª–¥–∏–Ω–≥–∞ –Ω–∞ –∞–∫—Ü–∏–∏ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∞–∫—Ç–∏–≤–∞. –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞–º–∏. –°–¥–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∞–ª–∞.",
            published_at=datetime(2025, 6, 7, 14, 15, 15, tzinfo=timezone.utc)
        ),
        NewsItem(
            title="Suzuki Motor –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ Swift –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ö–∏—Ç–∞—è",
            url="https://www.kommersant.ru/doc/7776980",
            source="news_feeder_rss",
            content="–Ø–ø–æ–Ω—Å–∫–∞—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è Suzuki Motor –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ Swift –∏–∑-–∑–∞ –Ω–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ –≤–ª–∞—Å—Ç—è–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –ö–æ–º–ø–∞–Ω–∏—è –∏—â–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.",
            published_at=datetime(2025, 6, 7, 13, 39, 21, tzinfo=timezone.utc)
        )
    ]


async def demo_full_pipeline():
    """Demonstrate full news-feeder ‚Üí news-tagger pipeline."""
    print("üîÑ News Processing Pipeline Demo")
    print("=" * 60)
    print("üì° news-feeder ‚Üí üè∑Ô∏è  news-tagger ‚Üí üì§ next-stage")
    print("=" * 60)
    
    # Setup logging
    setup_logging()
    
    # Step 1: Simulate news-feeder output
    print("\nüì∞ STEP 1: News Feeder - Simulated RSS News")
    print("-" * 40)
    
    print(f"üîß RSS Source: https://www.kommersant.ru/rss/news.xml")
    print(f"‚öôÔ∏è  Worker: news_feeder_rss")
    
    print("\nüîÑ Simulating news fetch from RSS feed...")
    # Simulate the news items that news-feeder would provide
    news_items = create_sample_news_from_feeder()
    
    print(f"‚úÖ Simulated {len(news_items)} news items from RSS feed")
    
    # Take first 3 items for demo
    sample_items = news_items[:3]
    print(f"üìã Processing first {len(sample_items)} items for demo")
    
    # Step 2: Configure news-tagger
    print(f"\nüè∑Ô∏è  STEP 2: News Tagger - Processing News Items")
    print("-" * 40)
    
    llm_config = LLMConfig(
        api_key="demo-key",  # Mock key for demo
        model="gpt-4",
        base_url="https://openrouter.ai/api/v1",
        max_tokens=150,
        temperature=0.3,
        timeout=30
    )
    
    tagger_config = TaggerConfig(
        llm=llm_config,
        categories=[
            "finance", "trading", "markets", "commodities", "agriculture",
            "aviation", "corporate", "exports", "futures", "derivatives",
            "energy", "technology", "politics", "international"
        ],
        min_confidence=0.7,
        max_tags=4
    )
    
    print(f"ü§ñ LLM Model: {tagger_config.llm.model}")
    print(f"üè∑Ô∏è  Categories: {len(tagger_config.categories)} available")
    print(f"üìä Min confidence: {tagger_config.min_confidence}")
    print(f"üî¢ Max tags: {tagger_config.max_tags}")
    
    # Create tagger service
    tagger_service = LLMService(tagger_config)
    
    # Step 3: Process each news item through the pipeline
    print(f"\nüîÑ STEP 3: Pipeline Processing")
    print("-" * 40)
    
    processed_items = []
    
    for i, news_item in enumerate(sample_items, 1):
        print(f"\nüìÑ Processing Item {i}/{len(sample_items)}")
        print(f"   üì∞ Title: {news_item.title[:80]}...")
        print(f"   üåê Source: {news_item.source}")
        print(f"   üìÖ Published: {news_item.published_at}")
        print(f"   üìù Content: {len(news_item.content)} chars")
        
        try:
            # Validate content
            content = tagger_service._extract_content(news_item)
            if not content.strip():
                print(f"   ‚ö†Ô∏è  Skipped: No meaningful content")
                continue
            
            print(f"   ‚úÖ Content validated ({len(content)} chars)")
            
            # Build prompt
            prompt = tagger_service._build_prompt(news_item)
            print(f"   ‚úÖ Prompt generated ({len(prompt)} chars)")
            
            # Simulate LLM tagging (since we don't have real API key)
            # Generate realistic mock tags based on content
            mock_tags = []
            mock_scores = {}
            
            content_lower = content.lower()
            
            # Simple keyword-based mock tagging
            if any(word in content_lower for word in ['–±–∏—Ä–∂–∞', '—Ç–æ—Ä–≥–∏', '—Ñ—å—é—á–µ—Ä—Å', '–∞–∫—Ü–∏–∏']):
                mock_tags.extend(['finance', 'trading', 'markets'])
                mock_scores.update({'finance': 0.92, 'trading': 0.85, 'markets': 0.78})
            
            if any(word in content_lower for word in ['–∫–æ–º–ø–∞–Ω–∏—è', '–∫–æ—Ä–ø–æ—Ä–∞—Ç', '–±–∏–∑–Ω–µ—Å']):
                if 'corporate' not in mock_tags:
                    mock_tags.append('corporate')
                    mock_scores['corporate'] = 0.88
            
            if any(word in content_lower for word in ['—ç–∫—Å–ø–æ—Ä—Ç', '–∏–º–ø–æ—Ä—Ç', '—Ç–æ—Ä–≥–æ–≤–ª—è']):
                if 'exports' not in mock_tags:
                    mock_tags.append('exports')
                    mock_scores['exports'] = 0.82
            
            if any(word in content_lower for word in ['–ø—à–µ–Ω–∏—Ü–∞', '—Å–µ–ª—å—Å–∫–æ–µ', '—É—Ä–æ–∂–∞–π']):
                if 'agriculture' not in mock_tags:
                    mock_tags.append('agriculture')
                    mock_scores['agriculture'] = 0.89
            
            if any(word in content_lower for word in ['boeing', '—Å–∞–º–æ–ª–µ—Ç', '–∞–≤–∏–∞']):
                if 'aviation' not in mock_tags:
                    mock_tags.append('aviation')
                    mock_scores['aviation'] = 0.91
            
            # Fallback tags
            if not mock_tags:
                mock_tags = ['finance', 'markets']
                mock_scores = {'finance': 0.75, 'markets': 0.72}
            
            # Limit to max_tags
            mock_tags = mock_tags[:tagger_config.max_tags]
            mock_scores = {tag: score for tag, score in mock_scores.items() if tag in mock_tags}
            
            print(f"   ü§ñ Mock LLM tagging completed")
            print(f"      üè∑Ô∏è  Generated tags: {mock_tags}")
            print(f"      üìä Confidence scores: {mock_scores}")
            
            # Apply filtering
            import json
            mock_response = {"tags": mock_tags, "confidence_scores": mock_scores}
            result = tagger_service._parse_llm_response(json.dumps(mock_response), "gpt-4")
            filtered_result = tagger_service._apply_filters(result)
            
            print(f"   ‚úÖ Filtering applied (min_confidence={tagger_config.min_confidence})")
            print(f"      üè∑Ô∏è  Final tags: {filtered_result.tags}")
            print(f"      üìä Final scores: {filtered_result.confidence_scores}")
            
            # Create tagged news item
            tagged_item = {
                'original_news': news_item,
                'tags': filtered_result.tags,
                'confidence_scores': filtered_result.confidence_scores,
                'model_used': filtered_result.model_used,
                'processed_at': datetime.now(timezone.utc)
            }
            
            processed_items.append(tagged_item)
            print(f"   ‚úÖ Item processed and tagged successfully")
            
        except Exception as e:
            print(f"   ‚ùå Error processing item: {e}")
            continue
    
    # Step 4: Summary
    print(f"\nüìä STEP 4: Pipeline Summary")
    print("-" * 40)
    
    print(f"üì• Input: {len(news_items)} news items from RSS feed")
    print(f"üîÑ Processed: {len(sample_items)} items through pipeline")
    print(f"üì§ Output: {len(processed_items)} successfully tagged items")
    print(f"‚ö° Success rate: {len(processed_items)/len(sample_items)*100:.1f}%")
    
    print(f"\nüè∑Ô∏è  Tag Distribution:")
    all_tags = []
    for item in processed_items:
        all_tags.extend(item['tags'])
    
    from collections import Counter
    tag_counts = Counter(all_tags)
    for tag, count in tag_counts.most_common():
        print(f"   {tag}: {count} items")
    
    print(f"\nüì§ Next Steps:")
    print(f"   ‚Ä¢ Tagged news items would be sent to next workflow stage")
    print(f"   ‚Ä¢ Could be stored in database, sent to trading algorithms, etc.")
    print(f"   ‚Ä¢ Each item has structured tags with confidence scores")
    
    print(f"\n‚úÖ Pipeline demo completed successfully!")
    return processed_items


async def demo_real_time_simulation():
    """Simulate real-time processing."""
    print(f"\n" + "=" * 60)
    print("‚è±Ô∏è  Real-Time Processing Simulation")
    print("=" * 60)
    
    print("üîÑ Simulating continuous news processing...")
    print("   (In production, this would run continuously)")
    print()
    
    # Simulate processing cycle
    for cycle in range(1, 4):
        print(f"üì° Processing Cycle {cycle}")
        print(f"   ‚è∞ {datetime.now().strftime('%H:%M:%S')} - Checking for new news...")
        
        # Simulate finding new items
        await asyncio.sleep(1)  # Simulate processing time
        
        new_items = cycle  # Mock: found some new items
        print(f"   üì∞ Found {new_items} new items")
        print(f"   üè∑Ô∏è  Tagging {new_items} items...")
        
        await asyncio.sleep(0.5)  # Simulate tagging time
        
        print(f"   ‚úÖ Tagged {new_items} items successfully")
        print(f"   üì§ Sent to next stage")
        print()
    
    print("‚úÖ Real-time simulation completed!")


if __name__ == "__main__":
    print("üöÄ Starting News Processing Pipeline Demo...")
    print()
    
    asyncio.run(demo_full_pipeline())
    asyncio.run(demo_real_time_simulation())
    
    print("\nüéâ All pipeline demos completed!")
    print("The news-feeder ‚Üí news-tagger integration is working successfully!")